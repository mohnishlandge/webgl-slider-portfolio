{"id":"src/Shaders.js","dependencies":[{"name":"D:\\05-bruno-arizio-case-study-animations\\package.json","includedInParent":true,"mtime":1618024754650}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fragmentShader = exports.vertexShader = void 0;\nvar noise = \"\\n  vec3 mod289(vec3 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n  }\\n\\n  vec4 mod289(vec4 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n  }\\n\\n  vec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n  }\\n\\n  vec4 taylorInvSqrt(vec4 r) {\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n  }\\n\\n  vec3 fade(vec3 t) {\\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\\n  }\\n\\n  float cnoise(vec3 P) {\\n    vec3 Pi0 = floor(P); // Integer part for indexing\\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n    Pi0 = mod289(Pi0);\\n    Pi1 = mod289(Pi1);\\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n    vec4 iz0 = Pi0.zzzz;\\n    vec4 iz1 = Pi1.zzzz;\\n\\n    vec4 ixy = permute(permute(ix) + iy);\\n    vec4 ixy0 = permute(ixy + iz0);\\n    vec4 ixy1 = permute(ixy + iz1);\\n\\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n    gx0 = fract(gx0);\\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n    vec4 sz0 = step(gz0, vec4(0.0));\\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n    gx1 = fract(gx1);\\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n    vec4 sz1 = step(gz1, vec4(0.0));\\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n    g000 *= norm0.x;\\n    g010 *= norm0.y;\\n    g100 *= norm0.z;\\n    g110 *= norm0.w;\\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n    g001 *= norm1.x;\\n    g011 *= norm1.y;\\n    g101 *= norm1.z;\\n    g111 *= norm1.w;\\n\\n    float n000 = dot(g000, Pf0);\\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n    float n111 = dot(g111, Pf1);\\n\\n    vec3 fade_xyz = fade(Pf0);\\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\\n    return 2.2 * n_xyz;\\n  }\\n\";\nvar vertexShader = \"\\n  uniform float distortion;\\n  uniform float distortionX;\\n  uniform float distortionY;\\n\\n  varying vec2 vUv;\\n\\n  void main() {\\n    vUv = uv;\\n\\n    vec3 newPosition = position;\\n\\n    float distanceX = length(position.x) / 50.0;\\n    float distanceY = length(position.y) / 50.0;\\n\\n    float distanceXPow = pow(distortionX, distanceX);\\n    float distanceYPow = pow(distortionY, distanceY);\\n\\n    newPosition.z -= distortion * max(distanceXPow + distanceYPow, 2.2);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.2);\\n  }\\n\";\nexports.vertexShader = vertexShader;\nvar fragmentShader = \"\\n  \".concat(noise, \"\\n\\n  uniform float alpha;\\n  uniform float displacementX;\\n  uniform float displacementY;\\n  uniform sampler2D image;\\n  uniform vec2 imageResolution;\\n  uniform vec2 resolution;\\n  uniform float scale;\\n  uniform float time;\\n  \\n  varying vec2 vUv;\\n  \\n  vec2 zoom(vec2 uv, float amount) {\\n    return 0.5 + ((uv - 0.5) * (1.0 - amount));\\n  }\\n  \\n  void main() {\\n    vec2 ratio = vec2(\\n      min((resolution.x / resolution.y) / (imageResolution.x / imageResolution.y), 1.0),\\n      min((resolution.y / resolution.x) / (imageResolution.y / imageResolution.x), 1.0)\\n    );\\n  \\n    vec2 uv = vec2(\\n      vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\\n      vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\\n    );\\n  \\n    float noise = cnoise(vec3(uv, sin(time * 0.01)) * 5.0 + time * 1.5);\\n  \\n    uv.x += noise * displacementX;\\n    uv.y += noise * displacementY;\\n  \\n    uv = zoom(uv, scale);\\n  \\n    gl_FragColor = vec4(texture2D(image, uv).xyz, alpha);\\n  }\\n\");\nexports.fragmentShader = fragmentShader;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"src/Shaders.js","original":{"line":1,"column":0}},{"name":"noise","generated":{"line":7,"column":4},"source":"src/Shaders.js","original":{"line":1,"column":6}},{"generated":{"line":7,"column":9},"source":"src/Shaders.js","original":{"line":1,"column":11}},{"generated":{"line":7,"column":2919},"source":"src/Shaders.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"src/Shaders.js","original":{"line":91,"column":7}},{"name":"vertexShader","generated":{"line":8,"column":4},"source":"src/Shaders.js","original":{"line":91,"column":13}},{"generated":{"line":8,"column":16},"source":"src/Shaders.js","original":{"line":91,"column":25}},{"generated":{"line":8,"column":582},"source":"src/Shaders.js","original":{"line":91,"column":7}},{"generated":{"line":10,"column":0},"source":"src/Shaders.js","original":{"line":115,"column":7}},{"name":"fragmentShader","generated":{"line":10,"column":4},"source":"src/Shaders.js","original":{"line":115,"column":13}},{"generated":{"line":10,"column":18},"source":"src/Shaders.js","original":{"line":115,"column":27}},{"name":"noise","generated":{"line":10,"column":35},"source":"src/Shaders.js","original":{"line":116,"column":4}},{"generated":{"line":10,"column":40},"source":"src/Shaders.js","original":{"line":115,"column":27}},{"generated":{"line":10,"column":1007},"source":"src/Shaders.js","original":{"line":115,"column":7}}],"sources":{"src/Shaders.js":"const noise = `\r\n  vec3 mod289(vec3 x) {\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n  }\r\n\r\n  vec4 mod289(vec4 x) {\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n  }\r\n\r\n  vec4 permute(vec4 x) {\r\n    return mod289(((x*34.0)+1.0)*x);\r\n  }\r\n\r\n  vec4 taylorInvSqrt(vec4 r) {\r\n    return 1.79284291400159 - 0.85373472095314 * r;\r\n  }\r\n\r\n  vec3 fade(vec3 t) {\r\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n  }\r\n\r\n  float cnoise(vec3 P) {\r\n    vec3 Pi0 = floor(P); // Integer part for indexing\r\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n    Pi0 = mod289(Pi0);\r\n    Pi1 = mod289(Pi1);\r\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n    vec4 iz0 = Pi0.zzzz;\r\n    vec4 iz1 = Pi1.zzzz;\r\n\r\n    vec4 ixy = permute(permute(ix) + iy);\r\n    vec4 ixy0 = permute(ixy + iz0);\r\n    vec4 ixy1 = permute(ixy + iz1);\r\n\r\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n    gx0 = fract(gx0);\r\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n    vec4 sz0 = step(gz0, vec4(0.0));\r\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n    gx1 = fract(gx1);\r\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n    vec4 sz1 = step(gz1, vec4(0.0));\r\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 *= norm0.x;\r\n    g010 *= norm0.y;\r\n    g100 *= norm0.z;\r\n    g110 *= norm0.w;\r\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 *= norm1.x;\r\n    g011 *= norm1.y;\r\n    g101 *= norm1.z;\r\n    g111 *= norm1.w;\r\n\r\n    float n000 = dot(g000, Pf0);\r\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n    float n111 = dot(g111, Pf1);\r\n\r\n    vec3 fade_xyz = fade(Pf0);\r\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n  }\r\n`\r\n\r\nexport const vertexShader = `\r\n  uniform float distortion;\r\n  uniform float distortionX;\r\n  uniform float distortionY;\r\n\r\n  varying vec2 vUv;\r\n\r\n  void main() {\r\n    vUv = uv;\r\n\r\n    vec3 newPosition = position;\r\n\r\n    float distanceX = length(position.x) / 50.0;\r\n    float distanceY = length(position.y) / 50.0;\r\n\r\n    float distanceXPow = pow(distortionX, distanceX);\r\n    float distanceYPow = pow(distortionY, distanceY);\r\n\r\n    newPosition.z -= distortion * max(distanceXPow + distanceYPow, 2.2);\r\n\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.2);\r\n  }\r\n`\r\n\r\nexport const fragmentShader = `\r\n  ${noise}\r\n\r\n  uniform float alpha;\r\n  uniform float displacementX;\r\n  uniform float displacementY;\r\n  uniform sampler2D image;\r\n  uniform vec2 imageResolution;\r\n  uniform vec2 resolution;\r\n  uniform float scale;\r\n  uniform float time;\r\n  \r\n  varying vec2 vUv;\r\n  \r\n  vec2 zoom(vec2 uv, float amount) {\r\n    return 0.5 + ((uv - 0.5) * (1.0 - amount));\r\n  }\r\n  \r\n  void main() {\r\n    vec2 ratio = vec2(\r\n      min((resolution.x / resolution.y) / (imageResolution.x / imageResolution.y), 1.0),\r\n      min((resolution.y / resolution.x) / (imageResolution.y / imageResolution.x), 1.0)\r\n    );\r\n  \r\n    vec2 uv = vec2(\r\n      vUv.x * ratio.x + (1.0 - ratio.x) * 0.5,\r\n      vUv.y * ratio.y + (1.0 - ratio.y) * 0.5\r\n    );\r\n  \r\n    float noise = cnoise(vec3(uv, sin(time * 0.01)) * 5.0 + time * 1.5);\r\n  \r\n    uv.x += noise * displacementX;\r\n    uv.y += noise * displacementY;\r\n  \r\n    uv = zoom(uv, scale);\r\n  \r\n    gl_FragColor = vec4(texture2D(image, uv).xyz, alpha);\r\n  }\r\n`\r\n"},"lineCount":null}},"error":null,"hash":"9d4f775a3bc051f5240cd80cac1c7540","cacheData":{"env":{}}}